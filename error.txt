#include <linux/module.h>
#include <linux/init.h>
#include <linux/mod_devicetable.h>
#include <linux/platform_device.h>
#include <linux/of_device.h>
#include <linux/gpio/consumer.h>
#include <linux/kthread.h>
#include <linux/delay.h>
#include <linux/jiffies.h>

/* Meta Information */
MODULE_LICENSE("GPL");
MODULE_AUTHOR("fernando-oechsler");
MODULE_DESCRIPTION("Teste com LED piscando via thread");

/* Funções */
static int dt_probe(struct platform_device *pdev);
static void dt_remove(struct platform_device *pdev);

/* Match com o device tree */
static const struct of_device_id my_driver_ids[] = {
	{ .compatible = "keyboard,msa620" },
	{ }
};
MODULE_DEVICE_TABLE(of, my_driver_ids);

/* Platform driver struct */
static struct platform_driver my_driver = {
	.probe = dt_probe,
	.remove = dt_remove,
	.driver = {
		.name = "my_device_driver",
		.of_match_table = my_driver_ids,
	},
};

/* GPIO e thread */
static struct gpio_desc *my_led = NULL;
static struct task_struct *blink_thread = NULL;
static bool running = true;

/* Thread Function */
static int blink_fn(void *data) {
	bool led_on = false;
	unsigned long last_jiffies = jiffies;

	while (!kthread_should_stop()) {
		if (time_after(jiffies, last_jiffies + msecs_to_jiffies(500))) {
			led_on = !led_on;
			gpiod_set_value(my_led, led_on);
			last_jiffies = jiffies;
		}
		schedule(); // Libera CPU até o próximo tick
	}

	/* Ao sair, garante que LED desliga */
	gpiod_set_value(my_led, 0);
	return 0;
}

/* Probe */
static int dt_probe(struct platform_device *pdev) {
	struct device *dev = &pdev->dev;
	int ret;

	printk("dt_gpio - Probe chamado\n");

	my_led = gpiod_get(dev, "ledtec", GPIOD_OUT_LOW);
	if (IS_ERR(my_led)) {
		printk("dt_gpio - Erro ao obter LED\n");
		return PTR_ERR(my_led);
	}

	blink_thread = kthread_run(blink_fn, NULL, "blink_thread");
	if (IS_ERR(blink_thread)) {
		printk("dt_gpio - Erro ao criar thread\n");
		ret = PTR_ERR(blink_thread);
		gpiod_put(my_led);
		return ret;
	}

	printk("dt_gpio - Probe finalizado com sucesso\n");
	return 0;
}

/* Remove */
static void dt_remove(struct platform_device *pdev) {
	printk("dt_gpio - Remove chamado\n");

	if (blink_thread) {
		kthread_stop(blink_thread);
		blink_thread = NULL;
	}

	gpiod_set_value(my_led, 0);
	gpiod_put(my_led);
}

/* Init */
static int __init my_init(void) {
	printk("dt_gpio - Driver carregando...\n");
	return platform_driver_register(&my_driver);
}

/* Exit */
static void __exit my_exit(void) {
	printk("dt_gpio - Driver descarregando...\n");
	platform_driver_unregister(&my_driver);
}

module_init(my_init);
module_exit(my_exit);
